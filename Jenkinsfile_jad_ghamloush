pipeline {
    agent any
    environment {
        VIRTUAL_ENV = 'venv'
    }
    stages {
        stage('Setup') {
            steps {
                bat "python -m venv %VIRTUAL_ENV%"
                bat "%VIRTUAL_ENV%\\Scripts\\pip.exe install -r requirements.txt"
            }
        }
        stage('Lint') {
            steps {
                bat "%VIRTUAL_ENV%\\Scripts\\flake8.exe app.py"
            }
        }
        stage('Test') {
            steps {
                bat """
                set PYTHONPATH=%cd%
                venv\\Scripts\\pytest.exe tests/
                """
            }
        }
        stage('Coverage') {
            steps {
                bat "venv\\Scripts\\coverage.exe run -m pytest tests/"
                bat "venv\\Scripts\\coverage.exe report"
                // Optionally, generate an HTML report
                bat "venv\\Scripts\\coverage.exe html"
                // Archive the coverage report
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'htmlcov',
                    reportFiles: 'index.html',
                    reportName: 'Coverage Report'
                ])
            }
        }
        stage('Security Scan') {
            steps {
                bat "venv\\Scripts\\bandit.exe -r app.py"
            }
        }
        stage('Deploy') {
            steps {
                bat """
                REM Basic Local Deployment Commands
                echo Deploying application to local deployment directory...
                REM Create deployment directory if it doesn't exist
                if not exist "C:\\Deployment\\MyApp\\" (
                    mkdir "C:\\Deployment\\MyApp\\"
                )
                REM Copy all project files to the deployment directory
                xcopy /E /I /Y "%WORKSPACE%\\*" "C:\\Deployment\\MyApp\\"
                echo Deployment completed successfully.
                """
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
